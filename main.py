import cv2
import os

import supervision as sv
import numpy as np

from ultralytics import YOLO
from datetime import datetime

CLASSES_TO_BE_IDENTIFIED = [1, 2, 3, 5, 7] #bicycle, car, motorcycle, bus and truck
COLOR: sv.Color = sv.Color.white()
BOX_THICKESS: float = 2
TEXT_THICKNESS: float = 1
TEXT_COLOR: sv.Color = sv.Color.black()
TEXT_SCALE: float = 0.5
TEXT_PADDING: int = 5

def main():
    # Get video files from videos folder in project dir
    cur_root_dir = os.getcwd()
    data_dir = os.path.join(cur_root_dir, "videos")
    result_dir = os.path.join(cur_root_dir, "results")

    # Get only .mov and .mp4 files for now
    video_files = [os.path.join(data_dir, f) for f in os.listdir(data_dir) if f.lower().endswith(".mov") or f.lower().endswith(".mp4")]

    for video_file in video_files:
        # Store counts of objects based on their names
        total_counts = dict(bicycle=0,
                            car=0,
                            motocycle=0,
                            bus=0,
                            truck=0
                           )

        # Store the ids generated by tracker
        existing_ids = []

        # Configure objects used for tracking
        model = YOLO("yolov8l.pt")

        box_annotator = sv.BoxAnnotator(
                thickness=BOX_THICKESS,
                text_thickness=TEXT_THICKNESS,
                text_scale=TEXT_SCALE
            )
        
        track_conf = dict(source=video_file, 
                          show=False,
                          stream=True, 
                          device="mps", 
                          tracker="bytetrack.yaml", 
                          classes=CLASSES_TO_BE_IDENTIFIED, 
                          conf=0.5
                          )

        for result in model.track(**track_conf): 
            # Iterate each frame
            frame = result.orig_img
            detections = sv.Detections.from_yolov8(result)

            if result.boxes.id is not None:
                detections.tracker_id = result.boxes.id.cpu().numpy().astype(int)
            
            detections = detections[(detections.class_id != 60) & (detections.class_id != 0)]

            labels = []

            for _, confidence, class_id, tracker_id in detections:
                # Get object label from class id
                cur_obj_lbl = model.model.names[class_id]

                # Each object can be identified by its tracker id. To count only unique objects, we need to check this id
                if (tracker_id not in existing_ids):
                    existing_ids.append(tracker_id)

                    if (cur_obj_lbl in total_counts):
                        total_counts[cur_obj_lbl] += 1
                    else:
                        total_counts[cur_obj_lbl] = 1

                # Generate info for the box that surrounds the tracking object
                labels.append(f"{tracker_id} {cur_obj_lbl} {confidence:0.2f}")

            # Draw the box that surrounds the tracking object
            frame = box_annotator.annotate(
                scene=frame, 
                detections=detections,
                labels=labels
            )

            # Calculate the area to display count info
            total_text_rect = sv.Rect(10, 10, 250, (total_counts.keys().__len__() + 1) * 30).pad(TEXT_PADDING)
            # Draw the background of the count info area
            cv2.rectangle(
                frame,
                total_text_rect.top_left.as_xy_int_tuple(),
                total_text_rect.bottom_right.as_xy_int_tuple(),
                COLOR.as_bgr(),
                -1,
            )
            
            # Draw the count text of each object
            cur_y = 30
            total_vehicles_count = 0
            for label, count in total_counts.items():
                cv2.putText(
                frame,
                f"Total {label}: " + str(count),
                    (10, cur_y),
                    cv2.FONT_HERSHEY_SIMPLEX,
                    TEXT_SCALE,
                    TEXT_COLOR.as_bgr(),
                    TEXT_THICKNESS,
                    cv2.LINE_AA,
                )
                cur_y += 20
                total_vehicles_count += count
            
            # Draw the total count text
            cv2.putText(
                frame,
                "Total vehicles: " + str(total_vehicles_count),
                (10, cur_y + 20),
                cv2.FONT_HERSHEY_SIMPLEX,
                TEXT_SCALE,
                TEXT_COLOR.as_bgr(),
                TEXT_THICKNESS,
                cv2.LINE_AA,
            )

            # Show the frame for user to see
            cv2.imshow("yolov8", frame)

            # Break the loop if 'q' is pressed
            if cv2.waitKey(1) & 0xFF == ord("q"):
                break

        # End reading one video, write result to file
        file_name = os.path.basename(video_file)
        date_path = file_name.split("_")[0]
        result_file_path = os.path.join(result_dir, date_path + ".csv")
        is_new_file = not os.path.exists(result_file_path)

        with open(result_file_path, 'a') as f:
            header_keys = total_counts.keys()
            if (is_new_file):
                # Write header row
                f.write(f"sep=,\n")
                f.write(f"FileName,{','.join(header_keys)},Total\n")
            # Write data row
            f.write(f"{file_name},{','.join([str(total_counts[key]) for key in header_keys])},{str(total_vehicles_count)}\n")
        
        # Clear the temp objects
        existing_ids.clear()
        total_counts.clear()

if __name__ == "__main__":
    main()